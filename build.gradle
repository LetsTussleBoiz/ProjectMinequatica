plugins {
    id "net.minecraftforge.gradle" version "[6.0,6.2.)"
    id "org.spongepowered.mixin" version "0.7-SNAPSHOT"
    id "java"
    id "idea"
    id "maven-publish"
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

apply plugin: "org.spongepowered.mixin"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
java.withSourcesJar()
java.withJavadocJar()

version = mod_version
group = mod_group_id

base.archivesName.set("${mod_name}-forge")

jar {
    manifest {
        attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : mod_version,
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : mod_version,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestamp'               : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Build-On-Minecraft'      : '1.20.1'
        ])
    }
}

repositories {
    mavenCentral()
    maven {
        name = 'Sponge / Mixin'
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
    it.options.release.set(17)
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version

    if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for this project.')
    }

    runs {
        client {
            workingDirectory project.file('run')
            args "-mixin.config=luluocean_forge.mixins.json"
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
        }

        server {
            workingDirectory project.file('run')
            args "-mixin.config=luluocean_forge.mixins.json"
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), "-mixin.config=luluocean_forge.mixins.json"
            taskName 'Data'
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    minecraft 'net.minecraftforge:forge:' + minecraft_version + '-' + forge_version
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.0"))
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.0"))
    //implementation(jarJar("io.github.llamalad7:mixinextras-common:0.4.0"))

    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.4.0")) {
        jarJar.ranged(it, "[0.4.0,)")
    }

    implementation fg.deobf('com.github.glitchfiend:TerraBlender-forge:' + minecraft_version + '-' + terrablender_version)
    implementation fg.deobf("curse.maven:natures-compass-252848:4712189")
    implementation fg.deobf("curse.maven:corgilib-693313:5170914")
    implementation fg.deobf("curse.maven:alexs-caves-924854:5162617")
    implementation fg.deobf("curse.maven:citadel-331936:5143956")
    implementation fg.deobf("curse.maven:xaeros-minimap-263420:5262365")
    implementation fg.deobf("curse.maven:xaeros-world-map-317780:5262424")
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

// Workaround for SpongePowered/MixinGradle#38
afterEvaluate {
    tasks.configureReobfTaskForReobfJar.mustRunAfter(tasks.compileJava)
    tasks.configureReobfTaskForReobfJarJar.mustRunAfter(tasks.compileJava)
}

mixin {
    add sourceSets.main, "luluocean.refmap.json"
    config "luluocean_forge.mixins.json"

    debug.verbose = true
    debug.export = true
}

tasks.withType(JavaCompile).configureEach {
    source(project.sourceSets.main.allSource)
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}

jar.finalizedBy('reobfJar')